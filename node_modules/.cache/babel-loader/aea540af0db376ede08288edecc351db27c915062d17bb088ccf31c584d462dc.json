{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { FetchMealByFirstLetter } from '../services/mealtService.js';\nconst useMeals = () => {\n  _s();\n  const [meals, setMeals] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMeals = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    let allMeals = [];\n    try {\n      for (let letter of letters) {\n        const data = await FetchMealByFirstLetter(letter);\n        if (data) {\n          allMeals = allMeals.concat(data); // Agregar los meals obtenidos\n        }\n      }\n      setMeals(allMeals);\n    } catch (error) {\n      setError('Error fetching meals');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchMeals(); // Llamar a todas las letras del alfabeto\n  }, [fetchMeals]);\n  return {\n    meals,\n    loading,\n    error\n  };\n};\n_s(useMeals, \"gcj8seq1WoUmbssRL/HhRUH44mE=\");\nexport default useMeals;","map":{"version":3,"names":["useState","useEffect","useCallback","FetchMealByFirstLetter","useMeals","_s","meals","setMeals","loading","setLoading","error","setError","fetchMeals","letters","split","allMeals","letter","data","concat"],"sources":["C:/Users/Gianni/Desktop/DWRJS-segundo-parcial/src/hooks/useMeals.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { FetchMealByFirstLetter } from '../services/mealtService.js'; \r\n\r\nconst useMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchMeals = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');\r\n    let allMeals = [];\r\n\r\n    try {\r\n      for (let letter of letters) {\r\n        const data = await FetchMealByFirstLetter(letter);\r\n        if (data) {\r\n          allMeals = allMeals.concat(data); // Agregar los meals obtenidos\r\n        }\r\n      }\r\n      setMeals(allMeals);\r\n    } catch (error) {\r\n      setError('Error fetching meals');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMeals(); // Llamar a todas las letras del alfabeto\r\n  }, [fetchMeals]);\r\n\r\n  return { meals, loading, error };\r\n};\r\n\r\nexport default useMeals;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,sBAAsB,QAAQ,6BAA6B;AAEpE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,UAAU,GAAGV,WAAW,CAAC,YAAY;IACzCO,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,MAAME,OAAO,GAAG,4BAA4B,CAACC,KAAK,CAAC,EAAE,CAAC;IACtD,IAAIC,QAAQ,GAAG,EAAE;IAEjB,IAAI;MACF,KAAK,IAAIC,MAAM,IAAIH,OAAO,EAAE;QAC1B,MAAMI,IAAI,GAAG,MAAMd,sBAAsB,CAACa,MAAM,CAAC;QACjD,IAAIC,IAAI,EAAE;UACRF,QAAQ,GAAGA,QAAQ,CAACG,MAAM,CAACD,IAAI,CAAC,CAAC,CAAC;QACpC;MACF;MACAV,QAAQ,CAACQ,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,QAAQ,CAAC,sBAAsB,CAAC;IAClC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,OAAO;IAAEN,KAAK;IAAEE,OAAO;IAAEE;EAAM,CAAC;AAClC,CAAC;AAACL,EAAA,CA/BID,QAAQ;AAiCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}