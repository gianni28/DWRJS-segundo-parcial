{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { FetchMealByFirstLetter } from '../services/mealtService.js';\nconst useMeals = () => {\n  _s();\n  const [meals, setMeals] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMeals = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const allMeals = []; // Array para almacenar todas las comidas\n\n      // Llama a la API con cada letra del alfabeto\n      for (let letter = 'a'.charCodeAt(0); letter <= 'z'.charCodeAt(0); letter++) {\n        const currentLetter = String.fromCharCode(letter);\n        const data = await FetchMealByFirstLetter(currentLetter);\n        if (data) {\n          allMeals.push(...data); // Agrega las comidas al array\n        }\n      }\n      setMeals(allMeals); // Asigna todas las comidas al estado\n    } catch (error) {\n      setError('Error fetching meals');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchMeals(); // Llamado inicial para obtener todas las comidas\n  }, [fetchMeals]);\n  return {\n    meals,\n    loading,\n    error\n  };\n};\n_s(useMeals, \"gcj8seq1WoUmbssRL/HhRUH44mE=\");\nexport default useMeals;","map":{"version":3,"names":["useState","useEffect","useCallback","FetchMealByFirstLetter","useMeals","_s","meals","setMeals","loading","setLoading","error","setError","fetchMeals","allMeals","letter","charCodeAt","currentLetter","String","fromCharCode","data","push"],"sources":["C:/Users/Gianni/Desktop/DWRJS-segundo-parcial/src/hooks/useMeals.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { FetchMealByFirstLetter } from '../services/mealtService.js'; \r\n\r\nconst useMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchMeals = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const allMeals = []; // Array para almacenar todas las comidas\r\n\r\n      // Llama a la API con cada letra del alfabeto\r\n      for (let letter = 'a'.charCodeAt(0); letter <= 'z'.charCodeAt(0); letter++) {\r\n        const currentLetter = String.fromCharCode(letter);\r\n        const data = await FetchMealByFirstLetter(currentLetter);\r\n        if (data) {\r\n          allMeals.push(...data); // Agrega las comidas al array\r\n        }\r\n      }\r\n\r\n      setMeals(allMeals); // Asigna todas las comidas al estado\r\n    } catch (error) {\r\n      setError('Error fetching meals');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMeals(); // Llamado inicial para obtener todas las comidas\r\n  }, [fetchMeals]);\r\n\r\n  return { meals, loading, error };\r\n};\r\n\r\nexport default useMeals;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,sBAAsB,QAAQ,6BAA6B;AAEpE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,UAAU,GAAGV,WAAW,CAAC,YAAY;IACzCO,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,QAAQ,GAAG,EAAE,CAAC,CAAC;;MAErB;MACA,KAAK,IAAIC,MAAM,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAED,MAAM,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAED,MAAM,EAAE,EAAE;QAC1E,MAAME,aAAa,GAAGC,MAAM,CAACC,YAAY,CAACJ,MAAM,CAAC;QACjD,MAAMK,IAAI,GAAG,MAAMhB,sBAAsB,CAACa,aAAa,CAAC;QACxD,IAAIG,IAAI,EAAE;UACRN,QAAQ,CAACO,IAAI,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC;QAC1B;MACF;MAEAZ,QAAQ,CAACM,QAAQ,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,QAAQ,CAAC,sBAAsB,CAAC;IAClC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,OAAO;IAAEN,KAAK;IAAEE,OAAO;IAAEE;EAAM,CAAC;AAClC,CAAC;AAACL,EAAA,CAjCID,QAAQ;AAmCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}